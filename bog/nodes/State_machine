#!/usr/bin/env python
import rospy
import os
import time
from bog.msg import SetWheelSpeeds
from std_msgs.msg import Int64
from std_msgs.msg import Float64
from std_msgs.msg import Float32
from std_msgs.msg import Bool
from topic_tools.srv import MuxSelect

class Main:

	def __init__(self):

		#topics needed to move the robot around 
		self.Motor1 = rospy.Publisher('one/setpoint', Float64, queue_size=10)
		self.Motor2 = rospy.Publisher('two/setpoint', Float64, queue_size=10)
		self.Motor3 = rospy.Publisher('three/setpoint', Float64, queue_size=10)
		self.Motor4 = rospy.Publisher('four/setpoint', Float64, queue_size=10)
		self.Angle = rospy.Publisher('Goal_Angle', Float32, queue_size=10)
		self.Reset = rospy.Publisher('Distance_Reset', Bool, queue_size=10)

		#generating standard messages 
		self.Motor_Distance = Float64()
		self.Motor_Distance.data = 0

		#used for the motor reset
		self.bool_msg = Bool()
		self.bool_msg.data = False

		#MUX service 
		rospy.wait_for_service('mux/select')
		self.MUX = rospy.ServiceProxy('mux/select', MuxSelect)

		#test
		self.MUX('IMU_Motors')
		self.state = True



		#Moving into the main portion of the state machine
		self.central()




	#main loop function
	def central(self):

		#holds here until we recieve the first IR instruction
		while(self.state):
			pass

		A = self.instruction/100

		B = (self.instruction/10)%10

		C = self.instruction%10

		#first stage
		if(A):

			pass
		else:

			pass

		#second stage
		if(B):

			pass
		else:

			pass

		#third stage
		if(C):

			pass
		else:

			pass




		
		rospy.spin()


	#function for when we get the three digit info back
	def IR(self,data):
		#
		self.instruction = data.data
		self.state = False
		#print(self.instruction)



if __name__ == "__main__":
    start = Main()
    

